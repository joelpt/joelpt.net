/* 
/ Use this file to override any logic stemming from xwiki.js, the javascript is included on the page by the javascript.vm file.
/ 
/ 
/ The following code ensures that clicking on a create link
/ on the wiki does not cause a modal to pop up, preventing the scenario
/ where the request for the create page would go through WPF, and end up
/ rendered within the modal.  

/ Upon executing this function, wait for the document to load. Once loaded
/ find all wikicreatelink anchors, and remove the onclick events associated with them
/ Those events are initially added in xwiki.js
/ Github link:
/ https://github.com/xwiki/xwiki-platform/blob/stable-7.4.x/xwiki-platform-core/xwiki-platform-web/src/main/webapp/resources/js/xwiki/xwiki.js
/ @line 368
*/

(function() {
    document.observe('dom:loaded', function(){
      var links = $$('span.wikicreatelink a');

      links.forEach(function(entry){
          entry.stopObserving('click');
      });
    });
})();

var XWiki = (function(XWiki) {
  XWiki.widgets = XWiki.widgets || {};

  Object.extend(XWiki, {

    createAjaxUpdater: function (dhtmlSwitch, extraID, extraTemplate, scrollToAnchor, masterWiki) {
      new Ajax.Updater(
        extraID + "pane",
        window.docgeturl + '?xpage=xpart&vm=' + extraTemplate + masterWiki,
        {
          method: 'post',
          evalScripts: true,
          onComplete: function(transport){
            $("docextrapanes").className = "";

            // Let other know new content has been loaded
            document.fire("xwiki:docextra:loaded", {
              "id" : extraID,
              "element": $(extraID + "pane")
            });

            // switch tab
            dhtmlSwitch(extraID);

            if (scrollToAnchor) {
              // Yes, this is a POJW (Plain Old JavaScript Ha^Wworkaround) which
              // prevents the anchor 'jump' after a click event but enable it
              // when the user is arriving from a direct /Space/Page#Section URL
              $(extraID + 'anchor').id = extraID;
              location.href = '#' + extraID;
              $(extraID).id = extraID + 'anchor';
            }
          }
        }
      );

      return;
    },

    // We are overriding the existing displayDocExtra functionality in order to
    // pass through the 'master' flag (if present) to the history pane
    // See original functionality here: https://github.com/xwiki/xwiki-platform/blob/831157480cb19f1e77505cf8bf5e6146ec0f464b/xwiki-platform-core/xwiki-platform-web/src/main/webapp/resources/js/xwiki/xwiki.js#L166

    displayDocExtra: function (extraID, extraTemplate, scrollToAnchor) {

      // Hides the previously displayed extra pane (window.activeDocExtraPane)
      // and display the one that is passed as an argument (extraID).
      // Fires an event to notify that the pane has changed.

      var dhtmlSwitch = function (extraID) {
        var tab = document.getElementById(extraID + "tab");
        var pane = document.getElementById(extraID + "pane");
        if (window.activeDocExtraTab != null) {
          window.activeDocExtraTab.className = "";
          window.activeDocExtraPane.className = "hidden";
        }
        window.activeDocExtraTab = tab;
        window.activeDocExtraPane = pane;
        window.activeDocExtraTab.className = "active";
        window.activeDocExtraPane.className = "";
        tab.blur();

        document.fire("xwiki:docextra:activated", {"id": extraID});
      };
      // Use Ajax.Updater to display the requested pane (extraID) : comments, attachments, etc.
      // On complete :
      //   1. Call dhtmlSwitch()
      //   2. If the function call has been triggered by an event : reset location.href to #extraID
      //      (because when the link has been first clicked the anchor was not loaded)
      if ($(extraID + "pane").className.indexOf("empty") != -1) {
        if (window.activeDocExtraPane != null) {
            window.activeDocExtraPane.className = "invisible";
        }
        $("docextrapanes").className = "loading";

        // [Overriding change]
        // If the master has been set to xwiki in the query parameters (index >= 0)
        // pass it onto historyinline.vm POST call
        // otherwise, don't pass it in

        var masterWiki = (location.search.indexOf("master=xwiki") >= 0) ? '&master=xwiki' : '';

        this.createAjaxUpdater(dhtmlSwitch, extraID, extraTemplate, scrollToAnchor, masterWiki);
      } else {
        dhtmlSwitch(extraID);
        if (scrollToAnchor) {
          $(extraID + 'anchor').id = extraID;
          location.href = '#' + extraID;
          $(extraID).id = extraID + 'anchor';
        }
      }
    },

    //When editing using Source, if user tries to unload, we are checking whether the contents have been changed.
    //(Contents mean contents for title and/or the contents in the main textArea)
    //If the contents changed, a window will pop out to ensure user wants to unload without saving the change.
    //However, when user tries to unload by clicking the bottom buttons like Save, Preview or Cancel button,
    //the alert window won't pop out.

    setupSourcePageEventListeners: function () {
      require(['jquery'], function ($) {
        const originalContents = $("#content").val();
        const originalTitle = $('#xwikidoctitleinput').val();
        let bottomButtonsClicked = false;
        $('[name="action_save"], [name="action_preview"], [name="action_cancel"]').click(function () {
          bottomButtonsClicked = true;
        });

        window.onbeforeunload = function () {
          if (!bottomButtonsClicked) {
            const currentContents = $('#content').val();
            const currentTitle = $('#xwikidoctitleinput').val();
            //Check whether the contents are changed.
            if (currentContents !== originalContents || currentTitle !== originalTitle) {
              return true;
            }
          }
          return;
        }
      });
    },

    //Pop out an alert window for the preview page no matter whether the user makes changes or not.
    //Reason: we need to call getContent() in previewactions.vm if we try to get whether the contents are changed or not.
    //Next step: Implement MD5 in backend and use it to get the hash value for the contents and compare the hash value.

    setupPreviewPageEventListeners: function () {
      require(['jquery'], function ($) {
        let bottomButtonsClicked = false;
        $('[name="action_save"], [name="action_edit"], [name="action_cancel"]').click(function () {
          bottomButtonsClicked = true;
        });
        window.onbeforeunload = function () {
          if (!bottomButtonsClicked) {
            return true;
          }
          return;
        }
      });
    }
  });

  return XWiki;
})(XWiki);